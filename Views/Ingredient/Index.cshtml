@model IEnumerable<WebServiceCosmetics.Models.IngredientModel>
@using WebServiceCosmetics.Models;
@inject WebServiceCosmetics.Data.ApplicationDbContext _context

@{
    ViewData["Title"] = "Ингредиенты";
    var products = _context.Product.ToList();
}

<h2>Ингредиенты</h2>

<div class="form-group">
    <label for="productSelect">Выберите продукт:</label>
    <select id="productSelect" class="form-control">
        <option value="">-- Выберите продукт --</option>
        @foreach (var product in products)
        {
            <option value="@product.Id">@product.Name</option>
        }
    </select>
</div>

<button id="Create" class="btn btn-primary mt-2" style="display:none;">Добавить ингредиент</button>

<table class="table mt-3" id="ingredientTable" style="display:none;">
    <thead>
        <tr>
            <th>Наименование сырья</th>
            <th>Количество</th>
            <th>Действия</th>
        </tr>
    </thead>
    <tbody id="ingredientBody">
        <!-- Данные заполняются через JavaScript -->
    </tbody>
</table>

@section Scripts {
    <script>
        // Проверяем, был ли выбран продукт ранее
        document.addEventListener('DOMContentLoaded', function() {
            const selectedProductId = localStorage.getItem("selectedProductId");

            if (selectedProductId) {
                document.getElementById("productSelect").value = selectedProductId;
                loadIngredients(selectedProductId);
                document.getElementById("Create").style.display = "block";
            }
        });

        // Функция для загрузки ингредиентов для выбранного продукта
        function loadIngredients(productId) {
            if (productId) {
                fetch(`/Ingredient/GetByProduct?productId=${productId}`)
                    .then(response => response.json())
                    .then(data => {
                        let tbody = document.getElementById("ingredientBody");
                        tbody.innerHTML = ""; // Очищаем текущие данные в таблице
                        data.forEach(ingredient => {
                            let row = `<tr>
                                <td>${ingredient.raw_Material_Name}</td>
                                <td>${parseFloat(ingredient.quantity).toFixed(2)}</td>  <!-- Ensure decimal formatting -->
                                <td>
                                    <a href='/Ingredient/Edit/${ingredient.id}' class='btn btn-warning'>Редактировать</a>
                                    <button class='btn btn-danger delete-btn' data-id='${ingredient.id}'>Удалить</button>
                                </td>
                            </tr>`;
                            tbody.innerHTML += row;
                        });

                        document.getElementById("ingredientTable").style.display = "table"; // Показываем таблицу
                    })
                    .catch(error => {
                        console.error("Ошибка при загрузке данных: ", error);
                    });
            }
        }
            document.getElementById("Create").addEventListener("click", function() {
                let productId = document.getElementById("productSelect").value; // Получаем ID продукта
                if (productId) {
                    window.location.href = `/Ingredient/Create?productId=${productId}`; // Переход на страницу создания
                }
            });

             // Обработчик для выбора продукта
        document.getElementById("productSelect").addEventListener("change", function() {
            let productId = this.value; // Получаем ID продукта
            if (productId) {
                localStorage.setItem("selectedProductId", productId); // Сохраняем выбранный продукт в localStorage
                document.getElementById("Create").style.display = "block"; // Показываем кнопку "Добавить"
                loadIngredients(productId); // Загружаем ингредиенты для выбранного продукта
            } else {
                document.getElementById("Create").style.display = "none";
                document.getElementById("ingredientTable").style.display = "none";
            }
        });

                    document.getElementById("ingredientBody").addEventListener("click", function(event) {
            if (event.target && event.target.classList.contains("delete-btn")) {
                let Id = event.target.getAttribute("data-id"); // Получаем ID ингредиента
                if (confirm('Вы уверены, что хотите удалить этот элемент?')) {
                    fetch(`/Ingredient/Delete/${Id}`, { method: 'POST' })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                alert('Элемент удален');
                                // Обновляем таблицу для выбранного продукта
                                let productSelect = document.getElementById("productSelect");
                                productSelect.value = data.productId;
                                productSelect.dispatchEvent(new Event('change')); // Вызываем событие изменения для обновления данных
                            }
                        })
                        .catch(error => console.error("Ошибка при удалении: ", error));
                }
            }
        });

    </script>
}
