// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebServiceCosmetics.Data;

#nullable disable

namespace WebServiceCosmetics.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250523080424_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Positions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("WebServiceCosmetics.Models.BudgetModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("Bonus")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Persent")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Budget", (string)null);
                });

            modelBuilder.Entity("WebServiceCosmetics.Models.CreditModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AnnualInterestRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Months")
                        .HasColumnType("int");

                    b.Property<decimal?>("Penalties")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("RemainingAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Years")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("Credit", (string)null);
                });

            modelBuilder.Entity("WebServiceCosmetics.Models.Employer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("Full_Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("VARCHAR(15)");

                    b.Property<int?>("Position_id")
                        .HasColumnType("int");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("Position_id");

                    b.ToTable("Employees", (string)null);
                });

            modelBuilder.Entity("WebServiceCosmetics.Models.IngredientModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Product_id")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int?>("Raw_Material_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Product_id");

                    b.HasIndex("Raw_Material_id");

                    b.ToTable("Ingredient", (string)null);
                });

            modelBuilder.Entity("WebServiceCosmetics.Models.PaymentsModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int?>("Credit_id")
                        .HasColumnType("int");

                    b.Property<decimal>("FinalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Interest")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<int?>("OverdueDays")
                        .HasColumnType("int");

                    b.Property<decimal>("PaymentAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("Penalty")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("RemainingAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("id");

                    b.HasIndex("Credit_id");

                    b.ToTable("Payments", (string)null);
                });

            modelBuilder.Entity("WebServiceCosmetics.Models.ProductManufacturingModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<int?>("Employees_id")
                        .HasColumnType("int");

                    b.Property<int?>("Product_id")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("Employees_id");

                    b.HasIndex("Product_id");

                    b.ToTable("Product_Manufacturing", (string)null);
                });

            modelBuilder.Entity("WebServiceCosmetics.Models.ProductModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int?>("Unit_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Unit_id");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("WebServiceCosmetics.Models.ProductSalesModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<int?>("Employees_id")
                        .HasColumnType("int");

                    b.Property<int?>("Product_id")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("Employees_id");

                    b.HasIndex("Product_id");

                    b.ToTable("Product_Sales", (string)null);
                });

            modelBuilder.Entity("WebServiceCosmetics.Models.RawMaterialModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int?>("Unit_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Unit_id");

                    b.ToTable("Raw_Materials", (string)null);
                });

            modelBuilder.Entity("WebServiceCosmetics.Models.RawMaterialPurchaseModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<int?>("Employees_id")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int?>("Raw_Material_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Employees_id");

                    b.HasIndex("Raw_Material_id");

                    b.ToTable("Raw_Materials_Purchase", (string)null);
                });

            modelBuilder.Entity("WebServiceCosmetics.Models.SalaryModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<decimal?>("Bonus")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("Common")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int");

                    b.Property<int>("Employees_id")
                        .HasColumnType("int");

                    b.Property<decimal?>("General")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Issued")
                        .HasColumnType("bit");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<int?>("NumberOfProductions")
                        .HasColumnType("int");

                    b.Property<int?>("NumberOfPurchases")
                        .HasColumnType("int");

                    b.Property<int?>("NumberOfSales")
                        .HasColumnType("int");

                    b.Property<decimal>("SalaryAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("Employees_id");

                    b.ToTable("Salary", (string)null);
                });

            modelBuilder.Entity("WebServiceCosmetics.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WebServiceCosmetics.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WebServiceCosmetics.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebServiceCosmetics.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WebServiceCosmetics.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebServiceCosmetics.Models.Employer", b =>
                {
                    b.HasOne("Positions", "Positions")
                        .WithMany("Employees")
                        .HasForeignKey("Position_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Positions");
                });

            modelBuilder.Entity("WebServiceCosmetics.Models.IngredientModel", b =>
                {
                    b.HasOne("WebServiceCosmetics.Models.ProductModel", "ProductModel")
                        .WithMany("ingredient")
                        .HasForeignKey("Product_id");

                    b.HasOne("WebServiceCosmetics.Models.RawMaterialModel", "RawMaterialModel")
                        .WithMany("ingredient")
                        .HasForeignKey("Raw_Material_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ProductModel");

                    b.Navigation("RawMaterialModel");
                });

            modelBuilder.Entity("WebServiceCosmetics.Models.PaymentsModel", b =>
                {
                    b.HasOne("WebServiceCosmetics.Models.CreditModel", "Credit")
                        .WithMany("Payment")
                        .HasForeignKey("Credit_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Credit");
                });

            modelBuilder.Entity("WebServiceCosmetics.Models.ProductManufacturingModel", b =>
                {
                    b.HasOne("WebServiceCosmetics.Models.Employer", "Employees")
                        .WithMany("Product_Manufacturing")
                        .HasForeignKey("Employees_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebServiceCosmetics.Models.ProductModel", "ProductModel")
                        .WithMany("Product_Manufacturing")
                        .HasForeignKey("Product_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Employees");

                    b.Navigation("ProductModel");
                });

            modelBuilder.Entity("WebServiceCosmetics.Models.ProductModel", b =>
                {
                    b.HasOne("Unit", "Unit")
                        .WithMany("Product")
                        .HasForeignKey("Unit_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("WebServiceCosmetics.Models.ProductSalesModel", b =>
                {
                    b.HasOne("WebServiceCosmetics.Models.Employer", "Employees")
                        .WithMany("Product_Sales")
                        .HasForeignKey("Employees_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebServiceCosmetics.Models.ProductModel", "ProductModel")
                        .WithMany("Product_Sales")
                        .HasForeignKey("Product_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Employees");

                    b.Navigation("ProductModel");
                });

            modelBuilder.Entity("WebServiceCosmetics.Models.RawMaterialModel", b =>
                {
                    b.HasOne("Unit", "Unit")
                        .WithMany("RawMaterials")
                        .HasForeignKey("Unit_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("WebServiceCosmetics.Models.RawMaterialPurchaseModel", b =>
                {
                    b.HasOne("WebServiceCosmetics.Models.Employer", "Employees")
                        .WithMany("Raw_Materials_Purchase")
                        .HasForeignKey("Employees_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebServiceCosmetics.Models.RawMaterialModel", "RawMaterialModel")
                        .WithMany("Raw_Materials_Purchase")
                        .HasForeignKey("Raw_Material_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Employees");

                    b.Navigation("RawMaterialModel");
                });

            modelBuilder.Entity("WebServiceCosmetics.Models.SalaryModel", b =>
                {
                    b.HasOne("WebServiceCosmetics.Models.Employer", "Employees")
                        .WithMany("Salaries")
                        .HasForeignKey("Employees_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Positions", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Unit", b =>
                {
                    b.Navigation("Product");

                    b.Navigation("RawMaterials");
                });

            modelBuilder.Entity("WebServiceCosmetics.Models.CreditModel", b =>
                {
                    b.Navigation("Payment");
                });

            modelBuilder.Entity("WebServiceCosmetics.Models.Employer", b =>
                {
                    b.Navigation("Product_Manufacturing");

                    b.Navigation("Product_Sales");

                    b.Navigation("Raw_Materials_Purchase");

                    b.Navigation("Salaries");
                });

            modelBuilder.Entity("WebServiceCosmetics.Models.ProductModel", b =>
                {
                    b.Navigation("Product_Manufacturing");

                    b.Navigation("Product_Sales");

                    b.Navigation("ingredient");
                });

            modelBuilder.Entity("WebServiceCosmetics.Models.RawMaterialModel", b =>
                {
                    b.Navigation("Raw_Materials_Purchase");

                    b.Navigation("ingredient");
                });
#pragma warning restore 612, 618
        }
    }
}
